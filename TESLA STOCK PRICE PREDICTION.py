# -*- coding: utf-8 -*-
"""TESLA (Data Analysis)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1knWmYPNhW0nof5oV_9T7fPcqut6QQOgB
"""

#import libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#import data set
df = pd.read_csv('TSLA.csv')

#count of rows and columns
df.shape

#view first few rows of the dataset
df.head()

#view all the column present
df.columns

#calculation of all statistical values
df.describe()

#general information(data type,non null columns)
df.info()

#count of all unique values per column
df.nunique()

#convert the date columns to datetime format
df['Date']=pd.to_datetime(df['Date'])

#Summary stats
df.head()

"""We can observe that close and adj close have the same values"""

df[df['Close']==df['Adj Close']].shape

"""As both the columns have the same values we need to delete one of the columns"""

df=df.drop(['Adj Close'],axis=1)

#After deletion of column
df.head()

#count of null values per column
df.isnull().sum()

#finding duplicate
print(df.duplicated().sum())

"""Performing EDA on the data set to analyse the pattern in which the stock prices have moved over the period of time and how this affects the prices of the stock"""

#Historical view of closing price
df['Close'].plot(legend=True,figsize=(12,6))
plt.show()

#total volume of stock being traded each day over a period of 10 years
df['Volume'].plot(legend=True,figsize=(10,4))
plt.show()

#use pct_change to find the percent change for each day
df['Daily Return']=df['Close'].pct_change()

#plot the daily return percentage
df['Daily Return'].plot(figsize=(18,8),legend=True,linestyle='--',marker='o')
plt.show()

#An overall look at the average daily return using a histogram.Using seaborn to create both a histogram and kide plot on the same figure

sns.histplot(df['Daily Return'].dropna(),bins=100,color='red',kde=True)
plt.show()

#Relationship between Dependent and Independent variables
#Closing price Vs Opening price
plt.scatter(df['Close'],df['Open'])

#Close Vs Low
plt.scatter(df['Close'],df['Low'])

#As we can observe from the graph all the points can be connected through a common line
#WE ARE USING A LINEAR REGRESSION MODEL TO ANALYSE IT

X=df[['Open','Low']]
y=df['Close']

X

y

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

len(X_train)

len(X_test)

X_train

y_train

from sklearn.linear_model import LinearRegression
clf=LinearRegression()

clf.fit(X_train,y_train)

clf.predict(X_test)

y_pred=clf.predict(X_test)
y_pred

df=pd.DataFrame({'Actual':y_test,'Predicted':y_pred})
df

clf.score(X_test,y_test)

#LINEAR REGRESSION
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
import numpy as np
lin_regressor=LinearRegression()
mse=cross_val_score(lin_regressor,X,y,scoring='neg_mean_squared_error',cv=5)
print(np.mean(mse))

from sklearn.linear_model import Ridge
from sklearn.model_selection import GridSearchCV

ridge=Ridge()
parameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}
ridge_regressor=GridSearchCV(ridge,parameters,scoring='neg_mean_squared_error',cv=5)
ridge_regressor.fit(X,y)

print(ridge_regressor.best_params_)
print(ridge_regressor.best_score_)

from sklearn.linear_model import Lasso
from sklearn.model_selection import GridSearchCV
lasso=Lasso()
parameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}
lasso_regressor=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv=5)
lasso_regressor.fit(X,y)

print(lasso_regressor.best_params_)
print(lasso_regressor.best_score_)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

prediction_lasso=lasso_regressor.predict(X_test)
prediction_ridge=ridge_regressor.predict(X_test)

import seaborn as sns
sns.histplot(y_test-prediction_lasso,kde=True)

import seaborn as sns
sns.histplot(y_test-prediction_ridge,kde=True)

#MEAN SQUARED ERROR
from sklearn.metrics import confusion_matrix, accuracy_score

lasso_regressor.score(X_test,y_test)
lasso_regressor.fit(X,y)

print(lasso_regressor.score(X_test,y_test))

print(ridge_regressor.score(X_test,y_test))

#DATA VISUALISATION
#Line plot of closing stock price time
plt.figure(figsize=(10,6))
sns.lineplot(x='Date',y='Close',data=df)
plt.title('Closing Stock Price Over Time')
plt.xlabel('Date')
plt.ylabel('Closing Stock Price')
plt.show()

#Heatmap of correlation between stock prices
corr=df[['Open','High','Low','Close','Volume']].corr()
plt.figure(figsize=(8,8))
sns.heatmap(corr,annot=True,cmap='coolwarm')
plt.title('Correlation between Stock Prices')
plt.show()

plt.figure(figsize=(10,6))
sns.histplot(df['Close'],kde=True)
plt.title('Distribution of Closing Price')
plt.xlabel('Closing Stock Price')
plt.ylabel('Frequency')
plt.show()